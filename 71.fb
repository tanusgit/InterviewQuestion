class Solution {
      public String simplifyPath(String path) {
       //split the string at '/' and create an array of string  
        String [] s = path.split("/");
        //create a string stack
          Stack<String> st  = new Stack();
          //check for the .. and if the stack is not empty
          //if has .. and stack is not empty pop it
          for(int i = 0; i < s.length; i++){
              if(!st.isEmpty() && s[i].equals("..")){
                  st.pop();
              }//check if it does not have .., '', '.' then push it to the stack as it is a string
              else if(!s[i].equals("..") && !s[i].equals(".") && !s[i].equals("")){
                  st.push(s[i]);
              }
          }
          return "/"+String.join("/", st);
          //st.tostring() reverses the element in the stack so, st == foo/home becomes home/foo
          
        
      }
}


//did not pass all the test cases
class Solution {
    public String simplifyPath(String path) {
        String ch[] = path.split("/");
        Queue<String> q = new LinkedList<>();
        Stack<String> st = new Stack<>();
        for(int i =0; i < ch.length; i++){
            String c = ch[i];
            if(!c.equals("")&&!c.equals("/") && !c.equals(".") && !c.equals("..") && !c.equals("...")){
                st.push(c);
                q.add(c);
            }
        }
         System.out.println("printing q " +q);
          
        StringBuilder sb = new StringBuilder();
           if(q.isEmpty()){
            return "/";
        }
        while(!q.isEmpty()){
            String slash = "/";
            sb.append(q.poll() + slash);
            slash="";
            System.out.println(sb);
        }
     
        String res = "/"+sb.toString();
        String res2 = res.substring(0, res.length()-1);
        return res2;
    }
}
